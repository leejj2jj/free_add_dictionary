buildscript {
  ext {
    queryDslVersion = "5.0.0"
  }
}

plugins {
  id 'org.springframework.boot' version '3.4.3'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'java'
}

group = 'com.freeadddictionary'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
  compileOnly {
      extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  // Spring Boot Starters
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-cache'

  // Cache
  implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

  // Thymeleaf Extensions
  implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
  implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

  // Database
  runtimeOnly 'com.h2database:h2'

  // QueryDSL
  implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
  annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
  annotationProcessor "jakarta.annotation:jakarta.annotation-api"
  annotationProcessor "jakarta.persistence:jakarta.persistence-api"

  // Lombok
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  // Swagger UI
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

  // Test
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'org.testcontainers:testcontainers:1.19.3'
  testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
  testImplementation 'org.testcontainers:mysql:1.19.3'
  testImplementation 'com.h2database:h2'
}

tasks.named('test') {
  useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
  main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
  options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
  file(querydslDir).deleteDir()
}